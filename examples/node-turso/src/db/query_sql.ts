// Code generated by sqlc. DO NOT EDIT.

import { Client } from "@libsql/client";

export const getAuthorQuery = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1`;

export interface GetAuthorArgs {
    id: any;
}

export interface GetAuthorRow {
    id: any;
    name: any;
    bio: any | null;
}

export async function getAuthor(client: Client, args: GetAuthorArgs): Promise<GetAuthorRow | null> {
    const result = await client.execute({
        sql: getAuthorQuery,
        args: [args.id]
    });
    if (result == undefined) {
        return null;
    }
    return result.rows.length ? result.rows[0] as unknown as GetAuthorRow : null;
}

export const listAuthorsQuery = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name`;

export interface ListAuthorsRow {
    id: any;
    name: any;
    bio: any | null;
}

export async function listAuthors(client: Client): Promise<ListAuthorsRow[]> {
    const result = await client.execute({
        sql: listAuthorsQuery,
        args: []
    });
    return result.rows as ListAuthorsRow[];
}

export const createAuthorQuery = `-- name: CreateAuthor :exec
INSERT INTO authors (
  name, bio
) VALUES (
  ?, ?
)`;

export interface CreateAuthorArgs {
    name: any;
    bio: any | null;
}

export async function createAuthor(client: Client, args: CreateAuthorArgs): Promise<void> {
    await client.execute({
        sql: createAuthorQuery,
        args: [args.name, args.bio]
    });
}

export const deleteAuthorQuery = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?`;

export interface DeleteAuthorArgs {
    id: any;
}

export async function deleteAuthor(client: Client, args: DeleteAuthorArgs): Promise<void> {
    await client.execute({
        sql: deleteAuthorQuery,
        args: [args.id]
    });
}

